generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  instructor
  admin
}

enum CourseLevel {
  beginner
  intermediate
  advanced
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  name          String
  bio           String?
  avatarUrl     String?  @map("avatar_url")
  role          UserRole @default(user)
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")

  courses       Course[]
  enrollments   Enrollment[]
  progress      Progress[]
  certificates  Certificate[]
  payments      Payment[]
  notifications Notification[]
  reviews       Review[]
  submissions   Submission[]
  sessions      Session[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Course {
  id           String      @id @default(uuid())
  title        String
  slug         String      @unique
  description  String
  instructorId String      @map("instructor_id")
  category     String
  level        CourseLevel
  price        Int
  thumbnailUrl String?     @map("thumbnail_url")
  duration     Int?
  published    Boolean     @default(false)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  instructor   User          @relation(fields: [instructorId], references: [id])
  lessons      Lesson[]
  enrollments  Enrollment[]
  certificates Certificate[]
  payments     Payment[]
  reviews      Review[]
  assignments  Assignment[]

  @@index([instructorId])
  @@index([category])
  @@index([published])
  @@index([slug])
  @@map("courses")
}

model Lesson {
  id          String   @id @default(uuid())
  courseId    String   @map("course_id")
  title       String
  description String?
  content     String?
  videoUrl    String?  @map("video_url")
  duration    Int?
  order       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@index([courseId])
  @@index([courseId, order])
  @@map("lessons")
}

model Enrollment {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  courseId    String    @map("course_id")
  enrolledAt  DateTime  @default(now()) @map("enrolled_at")
  completedAt DateTime? @map("completed_at")
  progress    Int       @default(0)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  lessonId    String    @map("lesson_id")
  completed   Boolean   @default(false)
  completedAt DateTime? @map("completed_at")
  timeSpent   Int       @default(0) @map("time_spent")

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("progress")
}

model Certificate {
  id            String   @id @default(uuid())
  certificateId String   @unique @map("certificate_id")
  userId        String   @map("user_id")
  courseId      String   @map("course_id")
  issuedAt      DateTime @default(now()) @map("issued_at")
  certificateUrl String? @map("certificate_url")

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@index([certificateId])
  @@map("certificates")
}

model Payment {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  courseId        String        @map("course_id")
  amount          Int
  currency        String        @default("USD")
  status          PaymentStatus
  stripePaymentId String?       @map("stripe_payment_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([stripePaymentId])
  @@map("payments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, read])
  @@map("notifications")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("reviews")
}

model Assignment {
  id          String   @id @default(uuid())
  courseId    String   @map("course_id")
  title       String
  description String
  dueDate     DateTime? @map("due_date")
  maxScore    Int      @default(100) @map("max_score")
  createdAt   DateTime @default(now()) @map("created_at")

  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@index([courseId])
  @@map("assignments")
}

model Submission {
  id           String    @id @default(uuid())
  assignmentId String    @map("assignment_id")
  userId       String    @map("user_id")
  content      String
  fileUrl      String?   @map("file_url")
  score        Int?
  feedback     String?
  submittedAt  DateTime  @default(now()) @map("submitted_at")
  gradedAt     DateTime? @map("graded_at")

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  @@index([assignmentId])
  @@index([userId])
  @@map("submissions")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}
